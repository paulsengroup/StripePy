..
  Copyright (C) 2025 Andrea Raffo <andrea.raffo@ibv.uio.no>
  SPDX-License-Identifier: MIT

Quickstart
==========

StripePy is organized into a few subcommands:

* `stripepy_download_help`: download a minified sample dataset suitable to quickly test StripePy.
* `stripepy_call_help`: run the stripe detection algorithm and store the identified stripes in a ``.hdf5`` file.
* `stripepy_view_help`: take the ``result.hdf5`` file generated by `stripepy_call_help` and extract stripes in BEDPE format.
* `stripepy_plot_help`: generate various kinds of plots to inspect the stripes identified by `stripepy_call_help`.

Walkthrough
-----------

The following is a synthetic example of a typical run of StripePy.
The steps outlined in this section assume that StripePy is running on a UNIX system.
Some commands may need a bit of tweaking to run on Windows.

1) Download a sample dataset (optional)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you need to download the example matrix used here, you can do so by running:

.. code-block:: console

  user@dev:/tmp$ stripepy download --name 4DNFI9GMP2J8

Feel free to use your own interaction matrix instead of ``4DNFI9GMP2J8.mcool``. Please make sure the matrix is in ``.cool``, ``.mcool``, or ``.hic`` format.

A more extended description of the subcommand `stripepy_download_help` is found in `Downloading sample datasets <./downloading_sample_datasets>`.

2) Detect architectural stripes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The `stripepy_call_help` subcommand is the core of the analysis, designed to identify architectural stripes within contact maps.
This process can be quite time-consuming, especially when working with large files.

The path to your contact map file and the desired resolution are required to run the analysis.
For instance, to analyse the ``4DNFI9GMP2J8.mcool`` file at a 10,000 bp resolution, you would use:

.. code-block:: console

  user@dev:/tmp$ stripepy call 4DNFI9GMP2J8.mcool 10000

The command will output a single HDF5 file (e.g., ``4DNFI9GMP2J8.10000.hdf5``).

Additional information is provided in `Detect architectural stripes <./detect_stripes>`.


3) Fetch stripes in BEDPE format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Stripe coordinates can be fetched from the ``.hdf5`` file using `stripepy_view_help`, as in

.. code-block:: console

  user@dev:/tmp$ stripepy view 4DNFI9GMP2J8.10000.hdf5 > stripes.bedpe

Further details can be found in `Fetch architectural stripes <./fetch_stripes>`.

4) Generating plots
^^^^^^^^^^^^^^^^^^^

StripePy comes with a ``plot`` subcommand that can be used to visualize architectural stripes overlaid on top of the Hi-C matrix.
`stripepy_plot_help` can also generate several graphs showing the general properties of the called stripes, see `Generating plots <./generate_plots>` for a complete overview.

For instance, running

.. code-block:: console

  user@dev:/tmp$ stripepy plot cm 4DNFI9GMP2J8.mcool 10000 /tmp/matrix_with_stripes.png --stripepy-hdf5 4DNFI9GMP2J8.10000.hdf5 --highlight-stripes

will generate the following plot

.. only:: not latex

  .. image:: assets/4DNFI9GMP2J8_chr14_34mbp-cm_plot_highlight_stripes.png

.. only:: latex

  .. image:: assets/4DNFI9GMP2J8_chr14_34mbp-cm_plot_highlight_stripes.pdf

Some comments on the Python API
-------------------------------

If you are working in Python, you might want to carry out analysis on the stripes and their biodescriptors.
The :py:class:`ResultFile` class helps load and process HDF5 files (e.g., ``4DNFI9GMP2J8.10000.hdf5``) generated by StripePy.

The following code snippet can be used to load lower-triangular stripes over the whole genome:

.. code-block:: python

  from stripepy.data_structures import ResultFile

  with ResultFile("4DNFI9GMP2J8.10000.hdf5") as f:
    df = f.get(chrom=None, field="stripes", location="LT")
    print(df.head())

This produces the following output:

.. code-block:: console

    chrom  seed  top_persistence  left_bound  right_bound  top_bound  bottom_bound  ...        q3       max  outer_lmean  outer_rmean  outer_mean  rel_change  cfx_of_variation
  0  chr1    84         0.040116          82           86         84           148  ...  0.361993  0.845531     0.201823     0.327025    0.264424   16.356562          0.390959
  1  chr1    93         0.398700          91           96         93           359  ...  0.286569  0.974157     0.180769     0.240014    0.210392   19.138436          0.563444
  2  chr1   102         0.054168          99          105        102           346  ...  0.295687  0.970851     0.250077     0.246783    0.248430    1.276074          0.605748
  3  chr1   108         0.082723         106          111        108           354  ...  0.271023  0.990342     0.251255     0.242434    0.246845    6.744239          0.629097
  4  chr1   116         0.105171         114          119        116           170  ...  0.503295  0.990244     0.452872     0.395339    0.424105    3.394272          0.394917

  [5 rows x 23 columns]

To focus on chr1, it is sufficient to run the following

.. code-block:: python

  from stripepy.data_structures import ResultFile

  with ResultFile("4DNFI9GMP2J8.10000.hdf5") as f:
    df = f.get(chrom="chr1", field="stripes", location="LT")
